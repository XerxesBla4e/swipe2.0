// Generated by view binder compiler. Do not edit!
package com.example.e_sholpine.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.e_sholpine.R;
import com.google.android.exoplayer2.ui.StyledPlayerView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class VideoContainerBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView imvAppear;

  @NonNull
  public final ImageView imvAvatar;

  @NonNull
  public final ImageView imvDownload;

  @NonNull
  public final ImageView imvMore;

  @NonNull
  public final ImageView imvPause;

  @NonNull
  public final ImageView imvShare;

  @NonNull
  public final ImageView imvVolume;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final ProgressBar pgbWait;

  @NonNull
  public final TextView tvComment;

  @NonNull
  public final TextView tvFavorites;

  @NonNull
  public final TextView tvTitle;

  @NonNull
  public final TextView txvDescription;

  @NonNull
  public final StyledPlayerView videoView;

  private VideoContainerBinding(@NonNull RelativeLayout rootView, @NonNull ImageView imvAppear,
      @NonNull ImageView imvAvatar, @NonNull ImageView imvDownload, @NonNull ImageView imvMore,
      @NonNull ImageView imvPause, @NonNull ImageView imvShare, @NonNull ImageView imvVolume,
      @NonNull LinearLayout linearLayout, @NonNull ProgressBar pgbWait, @NonNull TextView tvComment,
      @NonNull TextView tvFavorites, @NonNull TextView tvTitle, @NonNull TextView txvDescription,
      @NonNull StyledPlayerView videoView) {
    this.rootView = rootView;
    this.imvAppear = imvAppear;
    this.imvAvatar = imvAvatar;
    this.imvDownload = imvDownload;
    this.imvMore = imvMore;
    this.imvPause = imvPause;
    this.imvShare = imvShare;
    this.imvVolume = imvVolume;
    this.linearLayout = linearLayout;
    this.pgbWait = pgbWait;
    this.tvComment = tvComment;
    this.tvFavorites = tvFavorites;
    this.tvTitle = tvTitle;
    this.txvDescription = txvDescription;
    this.videoView = videoView;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static VideoContainerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static VideoContainerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.video_container, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static VideoContainerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imv_appear;
      ImageView imvAppear = ViewBindings.findChildViewById(rootView, id);
      if (imvAppear == null) {
        break missingId;
      }

      id = R.id.imvAvatar;
      ImageView imvAvatar = ViewBindings.findChildViewById(rootView, id);
      if (imvAvatar == null) {
        break missingId;
      }

      id = R.id.imvDownload;
      ImageView imvDownload = ViewBindings.findChildViewById(rootView, id);
      if (imvDownload == null) {
        break missingId;
      }

      id = R.id.imvMore;
      ImageView imvMore = ViewBindings.findChildViewById(rootView, id);
      if (imvMore == null) {
        break missingId;
      }

      id = R.id.imvPause;
      ImageView imvPause = ViewBindings.findChildViewById(rootView, id);
      if (imvPause == null) {
        break missingId;
      }

      id = R.id.imvShare;
      ImageView imvShare = ViewBindings.findChildViewById(rootView, id);
      if (imvShare == null) {
        break missingId;
      }

      id = R.id.imvVolume;
      ImageView imvVolume = ViewBindings.findChildViewById(rootView, id);
      if (imvVolume == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.pgbWait;
      ProgressBar pgbWait = ViewBindings.findChildViewById(rootView, id);
      if (pgbWait == null) {
        break missingId;
      }

      id = R.id.tvComment;
      TextView tvComment = ViewBindings.findChildViewById(rootView, id);
      if (tvComment == null) {
        break missingId;
      }

      id = R.id.tvFavorites;
      TextView tvFavorites = ViewBindings.findChildViewById(rootView, id);
      if (tvFavorites == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      id = R.id.txvDescription;
      TextView txvDescription = ViewBindings.findChildViewById(rootView, id);
      if (txvDescription == null) {
        break missingId;
      }

      id = R.id.videoView;
      StyledPlayerView videoView = ViewBindings.findChildViewById(rootView, id);
      if (videoView == null) {
        break missingId;
      }

      return new VideoContainerBinding((RelativeLayout) rootView, imvAppear, imvAvatar, imvDownload,
          imvMore, imvPause, imvShare, imvVolume, linearLayout, pgbWait, tvComment, tvFavorites,
          tvTitle, txvDescription, videoView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
